\NeedsTeXFormat{LaTeX2e}

\ProvidesPackage{lecode}[2006/02/07 Provides commands for printing programming source code.]

\usepackage{color}
\usepackage{calc}
\usepackage{ifthen}
\usepackage{lelists}
\usepackage{lefonts}

% CODE FONT.
\newcommand{\@codefonttype}{\CourierNewBold{}}
\newcommand{\codefonttype}[1]{\renewcommand{\@codefonttype}{#1}}
\newcommand{\@codefontsize}{\small}
\newcommand{\codefontsize}[1]{\renewcommand{\@codefontsize}{#1}}
\newcommand{\codefont}[1]{{\@codefonttype#1}}
\newcommand{\codesize}[1]{{\@codefontsize#1}}
\newcommand{\textcode}[1]{{\@codefonttype\@codefontsize#1}}

% LaTeX.
\newcommand{\tbs}{$\backslash$}

% XML.
% Commands of the form \xmlwrite* do all the do not write themselves on a new line. They do handle
% and indenting (stepcodelevel/prevcodelevel).
%
% Commands of the form \xml*text only write text, indenting and new line information is not written.
%
\newcommand*{\code@xmllabelprefix}{}
\newcommand*{\xmllabelprefix}[1]{\renewcommand*{\code@xmllabelprefix}{#1}}
\newcommand*{\makexmllabel}[2]{\label{\code@xmllabelprefix #1#2}}

% Command used to produce XML for text content (like for documentation). This command differs from
% the command \xmlstartelement in that it does not include the formatting commands used within the code
% environment.
%
% Example:
% XML: <purchaseorder>
% Command: \xmlelement{purchaseorder}
% Result: <purchaseorder>
\newcommand*{\xmlelement}[1]{\textcolor{xmlbracket}{\textless}\textcolor{xmlelement}{#1}\textcolor{xmlbracket}{\textgreater}}

% Start an element that does not contain attributes, but will contain other elements (it's not short).
%
% Example:
% XML: <purchaseorder> <item>pen</item> </purchaseorder>
% Command: \xmlstartelement{purchaseorder}
% Result: <purchaseorder>
\newcommand*{\xmlstartelement}[1]{\codeitem\makexmllabel{#1}{start}\textcolor{xmlbracket}{\textless}\textcolor{xmlelement}{#1}\textcolor{xmlbracket}{\textgreater}\stepcodelevel{}}

% Write an element that does not contain attributes or elements.
%
% Example:
% XML: <today/>
% Command: \xmlshortelement{today}
% Result: <today/>
\newcommand*{\xmlshortelement}[1]{\codeitem\makexmllabel{#1}{}\textcolor{xmlbracket}{\textless}\textcolor{xmlelement}{#1}\textcolor{xmlbracket}{/\textgreater}}

% Start an element that will contain attributes. Since at least one attributes is required, it takes the name
% and value of the first attribute as the second and third arguments.
%
% Example:
% XML: <purchaseorder id="1234"> <item>pen</item> </purchaseorder>
% Command: \xmlopenelement{purchaseorder}{id}{1234}
% Result: <purchaseorder id="1234"
\newcommand*{\xmlopenelement}[3]{\codeitem\makexmllabel{#1}{start}\makexmllabel{#1}{start}\textcolor{xmlbracket}{\textless}\textcolor{xmlelement}{#1} \xmlwriteattribute{#2}{#3}\stepcodelevel{}}

% Closes and open start element tag (one created with the \xmlopenelement command) for an element that contains
% both attributes and elements.
%
% Example:
% XML: <purchaseorder id="1234"> <item>pen</item> </purchaseorder>
% Commands: \xmlopenelement{purchaseorder}{id}{1234}\xmlcloseelement{}
% Result: <purchaseorder id="1234">
% Command: \xmlcloseelement{}
% Result: >
\newcommand*{\xmlcloseelement}{\textcolor{xmlbracket}{\textgreater}}

% Closes and open start element tag (one created with the \xmlopenelement command) for an element that contains
% attributes but not elements.
%
% Example:
% XML: <pen scew="1234"/>
% Commands: \xmlopenelement{pen}{scew}{1234}\xmlcloseshortelement{}
% Result: <pen scew="1234"/>
% Command: \xmlcloseshortelement{}
% Result: />
\newcommand*{\xmlendshortelement}{\textcolor{xmlbracket}{/\textgreater}\prevcodelevel{}}

% End an element. There are two ways to end an element, on a new line (\xmlendelement) or on
% the current line (\xmlwriteendelement).
%
% \xmlendelement and \xmlwriteendelement differ only in the formatting (which line the text is
% written to. Both use \xmlendelementtext to actually write the text.
%
% Example:
% XML: <purchaseorder> <item>pen</item> </purchaseorder>
% Commands: \xmlelement{purchaseorder}\xmlelement{item}pen\xmlwriteendelement{}\xmlendelement{}
% Result:
% <purchaseorder>
% <item>pen</item>
% </purchaseorder>
\newcommand*{\xmlendelement}[1]{\prevcodelevel{}\codeitem\makexmllabel{#1}{end}\xmlendelementtext{#1}}
\newcommand*{\xmlwriteendelement}[1]{\prevcodelevel{}\xmlendelementtext{#1}}
\newcommand*{\xmlendelementtext}[1]{\textcolor{xmlbracket}{\textless/}\textcolor{xmlelement}{#1}\textcolor{xmlbracket}{\textgreater}}

% Write attributes. The command \xmlattribute writes an attribute on a new line and the command \xmlwriteattribute
% writes the attribute by itself.
%
% Example:
% XML: <purchaseorder id="1234" status="inprogress"> <item>pen</item> </purchaseorder>
% Commands:
% \xmlopenelement{purchaseorder}{id}{1234}\xmlattribute{status}{inprogress}\xmlcloseelement{}
% \xmlelement{item}pen\xmlwriteendelement{item}\xmlendelement{purchaseorder}
% Result:
% <purchaseorder id="1234"
% status="inprogress">
% <item>pen</item>
% </purchaseorder>
\newcommand*{\xmlattribute}[2]{\codeitem\xmlwriteattribute{#1}{#2}}
\newcommand*{\xmlwriteattribute}[2]{\textcolor{xmlattribute}{#1}="\textcolor{xmlattributevalue}{#2}"\makexmllabel{#1}{attribute}}

% Default color scheme. All colors of elements, attributes, and syntax are black.
\newcommand*{\allblackxmlcolors}
{
	\definecolor{xmlbracket}{rgb}{0,0,0}
	\definecolor{xmlelement}{rgb}{0,0,0}
	\definecolor{xmlattribute}{rgb}{0,0,0}
	\definecolor{xmlattributevalue}{rgb}{0,0,0}
}

% Issue default color command to generate defined colors.
\allblackxmlcolors{}

% Colors are defaulted to black. Colors similar to those used by Microsoft (Internet Explorer / Visual Studio)
% can be generated by using this command.
% Example:
% \msxmlcolors{}
% \begin{code}[\codenumbering]{\tightcodeitemsep}
% \xmlelement{Configuration}
% \xmlendelement{Configuration}
% \end{code}
% The command can be issued anywhere in the code. Individual colors can be changed as required using a command
% similar to the structure below (the \definecolor command).
\newcommand*{\msxmlcolors}
{
	\definecolor{xmlbracket}{rgb}{0,0,1.0}
	\definecolor{xmlelement}{rgb}{0.5,0,0}
	\definecolor{xmlattribute}{rgb}{1.0,0,0}
	\definecolor{xmlattributevalue}{rgb}{0,0,0.9}
}


% AN UNDERLINE.
\newcommand*{\ul}{\_}


% SQUARE BRACKETS.
% This command prints the square brackets [] with a small space between them
% so that the brackets do not touch, producing a square.
\newlength{\bracketspace}
\setlength{\bracketspace}{2.0pt}
\newlength{\storebracketspace}
\newcommand*{\pushbracketspace}{\setlength{\storebracketspace}{\bracketspace}}
\newcommand*{\popbracketspace}{\setlength{\bracketspace}{\storebracketspace}}
\newcommand*{\brackets}{[\hspace*{\bracketspace}]}


% SIMPLE CODE FORMATTING.
% Code formatting for short or inline text.
% Special formatting for specific items like class names.
\newcommand{\codetext}{{lecode}{The {\protect\codetext} command is no longer supported}{ Rename the {\protect\codetext} command to {\protect\textcode} }}
\newcommand*{\class}[1]{\textcode{\codeisusertype{#1}}}
\newcommand*{\abstractclass}[1]{\class{\emph{\codeisusertype{#1}}}}
\newcommand*{\directory}[1]{\textcode{#1}}
\newcommand*{\filename}[1]{\textcode{#1}}


% KEYWORDS.
% Allow for code specific keywords that can be changed color to standout like in most development
% environments / debuggers used to produce code.
%
% See environment "simplecodemembers" for an example.
%
\definecolor{keywordcolor}{rgb}{0,0,1.0}

\newcommand*{\codekeyword}[1]{\textcolor{keywordcolor}{#1}}

\newcommand*{\codeabstract}{\codekeyword{abstract}}

\newcommand*{\codebase}{\codekeyword{base}}
\newcommand*{\codebool}{\codekeyword{bool}}
\newcommand*{\codebreak}{\codekeyword{break}}

\newcommand*{\codecatch}{\codekeyword{catch}}
\newcommand*{\codechar}{\codekeyword{char}}
\newcommand*{\codeconst}{\codekeyword{const}}
\newcommand*{\codeconstcast}{\codekeyword{const\ul{}cast}}

\newcommand*{\codedefault}{\codekeyword{default}}
\newcommand*{\codedefine}{\codekeyword{\#define}}
\newcommand*{\codedelegate}{\codekeyword{delegate}}
\newcommand*{\codedouble}{\codekeyword{double}}

\newcommand*{\codeelse}{\codekeyword{else}}
\newcommand*{\codeendif}{\codekeyword{\#endif}}
\newcommand*{\codeenum}{\codekeyword{enum}}
\newcommand*{\codeextern}{\codekeyword{extern}}

\newcommand*{\codefalse}{\codekeyword{false}}
\newcommand*{\codefor}{\codekeyword{for}}
\newcommand*{\codeforeach}{\codekeyword{foreach}}
\newcommand*{\codefunction}{\codekeyword{function}}

\newcommand*{\codeif}{\codekeyword{if}}
\newcommand*{\codeifdef}{\codekeyword{\#ifdef}}
\newcommand*{\codeifndef}{\codekeyword{\#ifndef}}
\newcommand*{\codeinclude}{\codekeyword{\#include}}
\newcommand*{\codeinline}{\codekeyword{inline}}
\newcommand*{\codeint}{\codekeyword{int}}
\newcommand*{\codeinternal}{\codekeyword{internal}}

\newcommand*{\codelong}{\codekeyword{long}}

\newcommand*{\codemessage}{\codekeyword{message}}

\newcommand*{\codenew}{\codekeyword{new}}

\newcommand*{\codeoperator}{\codekeyword{operator}}
\newcommand*{\codeoverride}{\codekeyword{override}}

\newcommand*{\codepragma}{\codekeyword{\#pragma}}
\newcommand*{\codeprivate}{\codekeyword{private}}
\newcommand*{\codeprotected}{\codekeyword{protected}}
\newcommand*{\codepublic}{\codekeyword{public}}

\newcommand*{\codereadonly}{\codekeyword{readonly}}
\newcommand*{\coderegister}{\codekeyword{register}}
\newcommand*{\codereinterpretcast}{\codekeyword{reinterpret\ul{}cast}}
\newcommand*{\codereturn}{\codekeyword{return}}

\newcommand*{\codeshort}{\codekeyword{short}}
\newcommand*{\codestatic}{\codekeyword{static}}
\newcommand*{\codestaticcast}{\codekeyword{static\ul{}cast}}
\newcommand*{\codestring}{\codekeyword{string}}
\newcommand*{\codestruct}{\codekeyword{struct}}
\newcommand*{\codeswitch}{\codekeyword{switch}}

\newcommand*{\codethis}{\codekeyword{this}}
\newcommand*{\codethrow}{\codekeyword{throw}}
\newcommand*{\codetrue}{\codekeyword{true}}
\newcommand*{\codetry}{\codekeyword{try}}
\newcommand*{\codetypeof}{\codekeyword{typeof}}

\newcommand*{\codeundefine}{\codekeyword{\#undef}}
\newcommand*{\codeunsigned}{\codekeyword{unsigned}}
\newcommand*{\codeusing}{\codekeyword{using}}

\newcommand*{\codevirtual}{\codekeyword{virtual}}
\newcommand*{\codevoid}{\codekeyword{void}}

\newcommand*{\codewhile}{\codekeyword{while}}


% COMMANDS FOR CREATING MEMBER LISTS.
\newcommand*{\keywordmember}[2]{#1\>#2 \\}
\newcommand*{\intmember}[1]{\keywordmember{\codeint{}}{#1}}
\newcommand*{\doublemember}[1]{\keywordmember{\codedouble{}}{#1}}
\newcommand*{\voidmember}[1]{\keywordmember{\codevoid{}}{#1}}
\newcommand*{\boolmember}[1]{\keywordmember{\codebool{}}{#1}}
\newcommand*{\stringmember}[1]{\keywordmember{\codestring{}}{#1}}


% USER TYPES.
% Allow for user types that are colored to standout like in most development
% environments / debuggers used to produce code.
\definecolor{usertypecolor}{rgb}{0.16863,0.56863,0.68627}
\newcommand*{\codeisusertype}[1]{\textcolor{usertypecolor}{#1}}

% STRINGS.
% Allow for strings that are colored to standout like in most development
% environments / debuggers used to produce code.
\definecolor{stringcolor}{rgb}{1.0,0,0}
\newcommand*{\codeisstring}[1]{\textcolor{stringcolor}{"#1"}}


% NUMBER.
% Allow for strings that are colored to standout like in most development
% environments / debuggers used to produce code.
\definecolor{numbercolor}{rgb}{0,0.502,0}
\newcommand*{\codeisnumber}[1]{\textcolor{numbercolor}{#1}}


% COMMENT.
% Allow for strings that are colored to standout like in most development
% environments / debuggers used to produce code.
\definecolor{commentcolor}{rgb}{0,0.502,0}
\newcommand*{\codeiscomment}[1]{\textcolor{commentcolor}{#1}}


% CREATE A SIMPLE CODE MEMBER ENVIRONMENT TO LIST CLASS MEMBERS OR VARIABLES.
% NOTE: THIS WILL NOT BREAK ACROSS PAGES, SO IT SHOULD NOT BE USED FOR LONG LISTS.
% Example:
% \begin{simplecodemembers}
% \intmember{points;}
% \doublemember{size;}
% \voidmember{**entitiesfound;}
% \end{simplecodemembers}

\newlength{\simplecodememberindent}
\setlength{\simplecodememberindent}{0.5in}

% FIX THIS: THIS NEEDS TO BE IMPLEMENTED MORE LIKE THE "WHERE" ENVIRONMENT IN THE MATH.STY. WHEN THIS IS USED AND %THERE IS NOT A BLANK % LINE BEFORE AND AFTER THE \begin{}...\end{}.
% FIX THIS: THIS NEEDS TO BE IMPLEMENTED MORE LIKE THE "WHERE" ENVIRONMENT IN THE MATH.STY. WHEN THIS IS USED AND %THERE IS NOT A BLANK % LINE BEFORE AND AFTER THE \begin{}...\end{}.
% FIX THIS: THIS NEEDS TO BE IMPLEMENTED MORE LIKE THE "WHERE" ENVIRONMENT IN THE MATH.STY. WHEN THIS IS USED AND %THERE IS NOT A BLANK % LINE BEFORE AND AFTER THE \begin{}...\end{}.

\newenvironment{simplecodemembers}
{
	\noindent
	\vspace*{1.0ex plus0.2ex minus0.1ex}
	\noindent\hspace*{\parindent}\noindent\begin{minipage}[t]{\textwidth-\parindent}\ttfamily
	\noindent
	\begin{tabbing} \pushtabs \hspace*{\simplecodememberindent} \= \kill
}
{
	\poptabs
	\end{tabbing}
	\end{minipage}
	\vspace*{1.0ex plus0.2ex minus0.1ex}
}


% CODE ENVIRONMENT.
%
% Example:
% \begin{code}[\codenumbering]
% \codeitem \pseudocodefor n=1 to n=5
% \stepcodelevel
% \codeitem i=i+n
% \prevcodelevel
% \codeitem \pseudocodedonefor
% \end{code}

\newlength{\standardcodeindent}
\setlength{\standardcodeindent}{10mm}
\newlength{\initialcodeindent}
\setlength{\initialcodeindent}{\parindent}
\newlength{\codeindent}
\newlength{\codeindentstore}

% This can be used to create areas where the code is not indented.
% Example:
% % Create a region where the code environment is not indented.
% \pushinitialcodeindent{0in}
% \begin{code}
% ...
% \end{code}
% \popinitialcodeindent{}
\newlength{\@initialcodeindentstore}
\newcommand*{\pushinitialcodeindent}[1]
{
	\setlength{\@initialcodeindentstore}{\initialcodeindent}
	\setlength{\initialcodeindent}{#1}
}
\newcommand*{\popinitialcodeindent}
{
	\setlength{\initialcodeindent}{\@initialcodeindentstore}
}

\newcounter{codeline}
\newcounter{codesolveline}

\newcommand{\stepcodelevel}{\setlength{\codeindent}{\codeindent+\standardcodeindent}}
\newcommand{\prevcodelevel}{\setlength{\codeindent}{\codeindent-\standardcodeindent}}

% Don't separate this to multiple lines, do so seems to create some extra horizontal space between
% the label and the text.
% Old version: %\newcommand{\codeitem}{\item \hspace*{\codeindent}}
\newcommand{\codeitem}[1][notused]{\ifthenelse{\equal{#1}{notused}}{\item \hspace*{\codeindent}}{\item[#1] \hspace*{\codeindent}}}

% Add some text without numbering it.
\newcommand*{\codeitemnonumber}[1]{\codeitem[]\hspace*{\labelnegwidth}#1}

% Algorithm / pseudo-code formatting commands.
\newcommand*{\pseudocodefor}{\textbf{\sffamily for}}
\newcommand*{\pseudocodedonefor}{\textbf{\sffamily done for}}
\newcommand*{\pseudocodewhile}{\textbf{\sffamily while}}
\newcommand*{\pseudocodedonewhile}{\textbf{\sffamily done while}}
\newcommand*{\pseudocodeexp}[1]{\mbox{\sffamily exp} \mbox{$\left[ #1 \right]$}}
\newcommand*{\pseudocodesolve}{\textbf{\sffamily Solve: }}
\newcommand*{\pseudocodeif}{\textbf{\sffamily if}}
\newcommand*{\pseudocodedoneif}{\textbf{\sffamily done if}}
\newcommand*{\pseudocodebreak}{\textbf{\sffamily exit do loop}}
\newcommand*{\pseudocodemax}{\textbf{\sffamily max}}

% 2021-12 Changed commands so the style was inline with the rest of the commands and changed the names to make them more apparent what they are.
% For now, throw errors to indicate that changes need to be made.  Remove at some future date when I'm sure no instances of these the old versions exist.
\newcommand*{\FOR}{\PackageError{lecode}{The {\protect\FOR} command is no longer supported}{ Use {\protect\pseudocodefor} instead. }}
\newcommand*{\DONEFOR}{\PackageError{lecode}{The {\protect\DONEFOR} command is no longer supported}{ Use {\protect\pseudocodedonefor} instead. }}
\newcommand*{\WHILE}{\PackageError{lecode}{The {\protect\WHILE} command is no longer supported}{ Use {\protect\pseudocodewhile} instead. }}
\newcommand*{\DONEWHILE}{\PackageError{lecode}{The {\protect\DONEWHILE} command is no longer supported}{ Use {\protect\pseudocodedonewhile} instead. }}
\newcommand*{\EXP}[1]{\PackageError{lecode}{The {\protect\EXP} command is no longer supported}{ Use {\protect\pseudocodeexp} instead. }}
\newcommand*{\solve}{\PackageError{lecode}{The {\protect\solve} command is no longer supported}{ Use {\protect\pseudocodesolve} instead. }}
\newcommand*{\IF}{\PackageError{lecode}{The {\protect\IF} command is no longer supported}{ Use {\protect\pseudocodeif} instead. }}
\newcommand*{\DONEIF}{\PackageError{lecode}{The {\protect\DONEIF} command is no longer supported}{ Use {\protect\pseudocodedoneif} instead. }}
\newcommand*{\BREAK}{\PackageError{lecode}{The {\protect\BREAK} command is no longer supported}{ Use {\protect\pseudocodebreak} instead. }}
\newcommand*{\MAX}{\PackageError{lecode}{The {\protect\MAX} command is no longer supported}{ Use {\protect\pseudocodemax} instead. }}


% Standard code numbering format, see above for example.
\newcommand*{\codenumbering}{\arabic{codeline}:\hfill}
\newcommand*{\codesolvenumbering}{}

% Standard.
\newlength{\standardcodeitemsep}
\setlength{\standardcodeitemsep}{0ex plus0.2ex}
\newlength{\codeitemsep}
\setlength{\codeitemsep}{\standardcodeitemsep}
\newlength{\tightcodeitemsep}
\setlength{\tightcodeitemsep}{-3pt}
\newlength{\codehangingindent}
\setlength{\codehangingindent}{0in}
\setlength{\listtopsep}{0in}

\newlength{\adjustforflushleft}
\setlength{\adjustforflushleft}{0pt}%{-7pt}

% The environment. The optional argument is the numbering format.
% Use \codenumbering for a standard format.
\newenvironment{code}[2][]
{
	\pushbracketspace{}
	\setlength{\bracketspace}{0pt}
	\setlength{\codeindent}{0in}
	\ifthenelse{\equal{#2}{}}
	{
		\setlength{\codeitemsep}{\standardcodeitemsep}
	}
	{
		\setlength{\codeitemsep}{#2}
	}
	%
	% If we were given a numbering sequence then we will number the solve items as well.  Otherwise
	% we will clear the command so nothing happens.
	\ifthenelse{\equal{#1}{}}
	{
		\renewcommand*{\codesolvenumbering}{}
	}
	{
		\renewcommand*{\codesolvenumbering}{\arabic{codeline}.\arabic{codesolveline}:\hfill}
	}
	\begin{flushleft}
	\vspace*{\adjustforflushleft}
	\begin{list}
	{#1}
	{
		\@codefonttype
		\@codefontsize
		% Counter to use (or not use if numbering was not specified).
		\usecounter{codeline}
		\codestandardlistparams{#1}
	}
}
{
    \end{list}
    \vspace*{\adjustforflushleft}
    \end{flushleft}
    \popbracketspace
}

\newlength{\labelnegwidth}
\newcommand{\codestandardlistparams}[1]
{
	% Start by setting up the standard list parameters and the override as necessary.
	\standardlistparams{}
	% If we don't have a numbering system, don't use a
	% label width, otherwise set it.
	\ifthenelse{\equal{#1}{}}
	{
		\setlength{\labelwidth}{0in}
	}
	{
		\setlength{\labelwidth}{0.30in}
	}
	\setlength{\labelsep}{0in}
	\setlength{\leftmargin}{\initialcodeindent+\labelsep+\labelwidth+\codehangingindent}
	\setlength{\rightmargin}{0in}
	\setlength{\listparindent}{\initialcodeindent}
	\setlength{\itemindent}{-\codehangingindent}
	\setlength{\parsep}{0.25ex plus0.2ex minus0.1ex}
	\setlength{\itemsep}{\codeitemsep}
	\setlength{\labelnegwidth}{-\leftmargin-\itemindent}
}


\newcommand{\codesolve}[1]
{
    \setlength{\codeindentstore}{\codeindent}
    \setlength{\codeindent}{0in}
    \codeitem \pseudocodesolve
    \begin{list}{\codesolvenumbering}
    {
		\usecounter{codesolveline}\codestandardlistparams{\codesolvenumbering}
		\ifthenelse{\equal{\codesolvenumbering}{}}
		{
			\setlength{\labelwidth}{\labelwidth}
		}
		{
			\setlength{\labelwidth}{\labelwidth+0.2in}
		}
		\setlength{\labelnegwidth}{-\labelwidth-\labelsep}
    }
    #1
	\end{list}
	\setlength{\codeindent}{\codeindentstore}
}
